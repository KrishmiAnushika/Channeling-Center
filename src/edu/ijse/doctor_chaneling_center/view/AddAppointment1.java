/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.doctor_chaneling_center.view;

import edu.ijse.doctor_chaneling_center.controller.ControllerFactory;
import edu.ijse.doctor_chaneling_center.controller.custom.AppointmentController;
import edu.ijse.doctor_chaneling_center.controller.custom.DayController;
import edu.ijse.doctor_chaneling_center.controller.custom.DoctorController;
import edu.ijse.doctor_chaneling_center.controller.custom.PatientController;
import edu.ijse.doctor_chaneling_center.controller.custom.SheduleController;
import edu.ijse.doctor_chaneling_center.controller.custom.SpecialityController;
import edu.ijse.doctor_chaneling_center.dto.AppointmentDTO;
import edu.ijse.doctor_chaneling_center.dto.DayDTO;
import edu.ijse.doctor_chaneling_center.dto.DoctorDTO;
import edu.ijse.doctor_chaneling_center.dto.PatientDTO;
import edu.ijse.doctor_chaneling_center.dto.SheduleDTO;
import edu.ijse.doctor_chaneling_center.dto.SpecialityDTO;
import edu.ijse.doctor_chaneling_center.other.AutoGenId;
import edu.ijse.doctor_chaneling_center.other.Validation;
import static edu.ijse.doctor_chaneling_center.view.Reception_DashBoard.pnlLoad;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class AddAppointment1 extends javax.swing.JPanel {

    AppointmentController appointmentController;
    PatientController patientController;
    SpecialityController specialityController;
    DoctorController doctorController;
    SheduleController sheduleController;
    DayController dayController;

    /**
     * Creates new form AddAppointment
     */
    public AddAppointment1() {
        initComponents();
        autoGenId();
        autoGenPatientId();

        appointmentController = (AppointmentController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.APPOINTMENT);
        patientController = (PatientController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.PATIENT);
        specialityController = (SpecialityController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.SPECIALITY);
        doctorController = (DoctorController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.DOCTOR);
        sheduleController = (SheduleController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.SHEDULE);
        dayController = (DayController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.DAY);
        String date = Reception_DashBoard.lblDateMain.getText();
        String time = Reception_DashBoard.lblTimeMain.getText();
        lblAppDate.setText(date);
        lblAppTime.setText(time);
        loadTocmbSpeciality();
        loadTocmbDoctor();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtAppId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtAppNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbDoctor = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbSpecialityId = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pickerAppDate = new com.toedter.calendar.JDateChooser();
        cmbTime = new javax.swing.JComboBox();
        lblAppTime = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        lblAppDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTime = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblPatientNic1 = new javax.swing.JLabel();
        txtPatientNic = new javax.swing.JTextField();
        lblPatientName1 = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblPatientAddress1 = new javax.swing.JLabel();
        txtPatientAddress = new javax.swing.JTextField();
        lblPatientTele1 = new javax.swing.JLabel();
        txtPatientTele = new javax.swing.JTextField();
        lblPatientTele2 = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        rdbMale = new javax.swing.JRadioButton();
        rdbFemale = new javax.swing.JRadioButton();
        btnAddPatient = new javax.swing.JButton();
        btnUpdatPatient = new javax.swing.JButton();
        btnRemovePatient = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 51));
        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("ADD APPOINTMENT");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 153), null, null));
        jLabel1.setOpaque(true);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1150, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 153), null, null));
        jPanel1.setForeground(new java.awt.Color(51, 51, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 255), null, null));

        jLabel2.setBackground(new java.awt.Color(51, 51, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("DATE:");

        jLabel3.setBackground(new java.awt.Color(51, 51, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("APPOINTMENT ID:");

        txtAppId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppIdActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(51, 51, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("APPOINTMENT NO:");

        txtAppNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppNoActionPerformed(evt);
            }
        });

        jLabel4.setText("DOCTOR NAME:");

        cmbDoctor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- Select Speciality -" }));
        cmbDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDoctorActionPerformed(evt);
            }
        });

        jLabel5.setText("SPECIALITY:");

        cmbSpecialityId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- Select Speciality -" }));
        cmbSpecialityId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSpecialityIdActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("APPOINTMENT DATE:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("APPOINTMENT TIME:");

        jLabel8.setBackground(new java.awt.Color(51, 51, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel8.setText("AVAILABLE DOCTORS:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SPECIALITY", "DOCTOR ID", "DOCTOR NAME", "DOCTOR TLE", "DOCTOR ADDRESS", "HOSPITAL", "PATIENT LIMIT"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnChange.setText("CHANGE");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30", "23:00", "23:30" }));

        lblAppTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblAppDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAppDate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time"
            }
        ));
        jScrollPane1.setViewportView(tblTime);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("TIME:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jSeparator2)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(153, 153, 153))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(pickerAppDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(113, 113, 113)))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                            .addComponent(cmbTime, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(cmbSpecialityId, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbDoctor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(194, 194, 194))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAppTime, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAppNo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblAppDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtAppId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(30, 30, 30))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAppDate, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAppId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAppNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(2, 2, 2)
                        .addComponent(lblAppTime, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbSpecialityId, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(cmbDoctor))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickerAppDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChange)
                    .addComponent(btnDelete)
                    .addComponent(btnNext)
                    .addComponent(btnSave))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 820, 520));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPatientNic1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPatientNic1.setText("PATIENT ID:");

        txtPatientNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientNicActionPerformed(evt);
            }
        });
        txtPatientNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientNicKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPatientNicKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPatientNicKeyTyped(evt);
            }
        });

        lblPatientName1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPatientName1.setText("PATIENT NAME:");

        txtPatientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientNameActionPerformed(evt);
            }
        });
        txtPatientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPatientNameKeyReleased(evt);
            }
        });

        lblPatientAddress1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPatientAddress1.setText("PATIENT ADDRESS:");

        lblPatientTele1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPatientTele1.setText("PATIENT TELE:");

        txtPatientTele.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientTeleKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPatientTeleKeyReleased(evt);
            }
        });

        lblPatientTele2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPatientTele2.setText("PATIENT AGE:");

        txtPatientAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientAgeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPatientAgeKeyReleased(evt);
            }
        });

        lblGender.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblGender.setText("GENDER:");

        buttonGroup1.add(rdbMale);
        rdbMale.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        rdbMale.setText("MALE");

        buttonGroup1.add(rdbFemale);
        rdbFemale.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        rdbFemale.setText("FEMALE");

        btnAddPatient.setText("ADD");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        btnUpdatPatient.setText("UPDATE");
        btnUpdatPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatPatientActionPerformed(evt);
            }
        });

        btnRemovePatient.setText("REMOVE");
        btnRemovePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientTele2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientTele1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientNic1)
                    .addComponent(lblPatientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientAddress1)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPatientNic, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPatientName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPatientAddress, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPatientTele, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPatientAge, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGap(57, 57, 57)
                            .addComponent(rdbMale, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(rdbFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnAddPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemovePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnUpdatPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblPatientNic1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientNic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPatientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPatientAddress1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPatientTele1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientTele, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPatientTele2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbMale, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(btnAddPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdatPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemovePatient)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 20, 300, 520));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 1150, 610));
    }// </editor-fold>//GEN-END:initComponents

    private void txtAppIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppIdActionPerformed
        String appId = txtAppId.getText();
        try {
            AppointmentDTO search = appointmentController.search(appId);
            txtAppNo.setText(Integer.toString(search.getAppNo()));
            String bookingDate = search.getBookingDate();
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date parse = df.parse(bookingDate);
            pickerAppDate.setDate(parse);
            cmbTime.setSelectedItem(search.getBookingTime().toString());

            PatientDTO search1 = patientController.search(search.getPatId());
            txtPatientNic.setText(search1.getPatId());
            txtPatientName.setText(search1.getPatName());
            txtPatientAddress.setText(search1.getPatAddress());
            txtPatientTele.setText(Integer.toString(search1.getPatTele()));
            txtPatientAge.setText(Integer.toString(search1.getAge()));
            if (search1.getGender().equalsIgnoreCase("male")) {
                rdbMale.setSelected(true);
            } else {
                rdbFemale.setSelected(true);
            }

        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtAppIdActionPerformed

    private void txtAppNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAppNoActionPerformed

    private void cmbSpecialityIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSpecialityIdActionPerformed
        searchDocBySpeciality();
    }//GEN-LAST:event_cmbSpecialityIdActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        String appId = txtAppId.getText();
        int appNo = Integer.parseInt(txtAppNo.getText());
        String appDate = lblAppDate.getText();
        String appTime = lblAppTime.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date = pickerAppDate.getDate();
        String bookDate = sdf.format(date);
        String bookTime = cmbTime.getSelectedItem().toString();
        String docId = jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString();

//        ArrayList<DoctorDTO> all;
//        try {
//            all = doctorController.getAll();
//
//            for (DoctorDTO all1 : all) {
//                if (all1.getDocName().equalsIgnoreCase(cmbDoctor.getSelectedItem().toString())) {
//                    docId = all1.getDocid();
//                }
//            }
//        } catch (Exception ex) {
//            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
//        }
        String patientId = txtPatientNic.getText();

        AppointmentDTO appointmentDTO = new AppointmentDTO(appId, appNo, appDate, appTime, bookDate, bookTime, docId, patientId);
        try {
            //AppointmentDTO search = appointmentController.search(docId);
            DoctorDTO search = doctorController.search(docId);
            int patientLimit = search.getPatientLimit();
            if (patientLimit != 0) {
                boolean add = appointmentController.add(appointmentDTO);
                if (add) {
                    setPatientCount();
                } else {
                    JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Patient Limit Exeeded..");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDoctorActionPerformed
        searchByDocName();
    }//GEN-LAST:event_cmbDoctorActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        updateAppointment();
    }//GEN-LAST:event_btnChangeActionPerformed

    private void txtPatientNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientNicActionPerformed
        searchPatient();
    }//GEN-LAST:event_txtPatientNicActionPerformed

    private void txtPatientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientNameActionPerformed

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        addPatient();
    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void btnUpdatPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatPatientActionPerformed
        updatePatient();
    }//GEN-LAST:event_btnUpdatPatientActionPerformed

    private void btnRemovePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePatientActionPerformed
        removePatient();
    }//GEN-LAST:event_btnRemovePatientActionPerformed

    private void txtPatientNicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientNicKeyPressed
    }//GEN-LAST:event_txtPatientNicKeyPressed

    private void txtPatientNicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientNicKeyReleased
    }//GEN-LAST:event_txtPatientNicKeyReleased

    private void txtPatientNicKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientNicKeyTyped
    }//GEN-LAST:event_txtPatientNicKeyTyped

    private void txtPatientNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientNameKeyPressed
        Validation.name(txtPatientName);
    }//GEN-LAST:event_txtPatientNameKeyPressed

    private void txtPatientNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientNameKeyReleased
        Validation.name(txtPatientName);
    }//GEN-LAST:event_txtPatientNameKeyReleased

    private void txtPatientTeleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientTeleKeyPressed
        Validation.phoneNumber(txtPatientTele, evt);
    }//GEN-LAST:event_txtPatientTeleKeyPressed

    private void txtPatientTeleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientTeleKeyReleased
        Validation.phoneNumber(txtPatientTele, evt);
    }//GEN-LAST:event_txtPatientTeleKeyReleased

    private void txtPatientAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientAgeKeyPressed
        Validation.age(txtPatientAge);
    }//GEN-LAST:event_txtPatientAgeKeyPressed

    private void txtPatientAgeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientAgeKeyReleased
        Validation.age(txtPatientAge);
    }//GEN-LAST:event_txtPatientAgeKeyReleased

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String appId = txtAppId.getText();
        Payment payment = new Payment(appId);
        pnlLoad.removeAll();
        pnlLoad.repaint();
        pnlLoad.revalidate();
        payment.setSize(pnlLoad.getSize());
        pnlLoad.add(payment);
        payment.setVisible(true);
    }//GEN-LAST:event_btnNextActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        addToTimeTable();
        setAppointmentNo();
        String docId = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 1);
        try {
            DoctorDTO search = doctorController.search(docId);
            int patientLimit = search.getPatientLimit();
            if (patientLimit == 0) {
                JOptionPane.showMessageDialog(this, "PATIENT LIMIT EXCEEDED FOR THIS DOCTOR..");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRemovePatient;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdatPatient;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDoctor;
    private javax.swing.JComboBox cmbSpecialityId;
    private javax.swing.JComboBox cmbTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable2;
    public static javax.swing.JLabel lblAppDate;
    public static javax.swing.JLabel lblAppTime;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblPatientAddress1;
    private javax.swing.JLabel lblPatientName1;
    private javax.swing.JLabel lblPatientNic1;
    private javax.swing.JLabel lblPatientTele1;
    private javax.swing.JLabel lblPatientTele2;
    private com.toedter.calendar.JDateChooser pickerAppDate;
    private javax.swing.JRadioButton rdbFemale;
    private javax.swing.JRadioButton rdbMale;
    private javax.swing.JTable tblTime;
    private javax.swing.JTextField txtAppId;
    private javax.swing.JTextField txtAppNo;
    private javax.swing.JTextField txtPatientAddress;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPatientNic;
    private javax.swing.JTextField txtPatientTele;
    // End of variables declaration//GEN-END:variables

    private void loadTocmbSpeciality() {
        try {
            ArrayList<SpecialityDTO> all = specialityController.getAll();
            cmbSpecialityId.removeAll();
            for (SpecialityDTO all1 : all) {
                cmbSpecialityId.addItem(all1.getSpename());

            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadTocmbDoctor() {
        try {
            ArrayList<DoctorDTO> all = doctorController.getAll();
            cmbDoctor.removeAll();
            for (DoctorDTO all1 : all) {
                cmbDoctor.addItem(all1.getDocName());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchDocBySpeciality() {
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        dtm.setRowCount(0);
        try {
            ArrayList<SpecialityDTO> allspecialities = specialityController.getAll();
            ArrayList<DoctorDTO> alldoctors = doctorController.getAll();
            String speId = "";
            for (SpecialityDTO allSpeciality : allspecialities) {
                if (allSpeciality.getSpename().equalsIgnoreCase(cmbSpecialityId.getSelectedItem().toString())) {
                    speId = allSpeciality.getSpeid();
                }
            }
            for (DoctorDTO alldoctor : alldoctors) {
                if (alldoctor.getSpecialityId().equalsIgnoreCase(speId)) {
                    Object[] rowData = {cmbSpecialityId.getSelectedItem().toString(), alldoctor.getDocid(), alldoctor.getDocName(), alldoctor.getDocTele(), alldoctor.getDocAddress(), alldoctor.getHospital(), alldoctor.getPatientLimit()};
                    dtm.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchByDocName() {
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        String docName = cmbDoctor.getSelectedItem().toString();
        try {
            ArrayList<DoctorDTO> alldoctors = doctorController.getAll();
            ArrayList<SpecialityDTO> allSpecialities = specialityController.getAll();
            String speId = "";
            for (DoctorDTO all1 : alldoctors) {
                speId = all1.getSpecialityId();
            }
            String speciality = "";
            for (SpecialityDTO allSpeciality : allSpecialities) {
                if (allSpeciality.getSpeid().equals(speId)) {
                    speciality = allSpeciality.getSpename();
                }
            }

            for (DoctorDTO allDoctor : alldoctors) {
                if (allDoctor.getDocName().equalsIgnoreCase(docName)) {
                    Object[] rowData = {speciality, allDoctor.getDocid(), allDoctor.getDocName(), allDoctor.getDocTele(), allDoctor.getDocAddress(), allDoctor.getHospital(), allDoctor.getPatientLimit()};
                    dtm.setRowCount(0);
                    dtm.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addPatient() {
        String patNic = txtPatientNic.getText();
        String patName = txtPatientName.getText();
        String patAddress = txtPatientAddress.getText();
        int patTele = Integer.parseInt(txtPatientTele.getText());

        String gender = "";
        if (rdbMale.isSelected()) {
            gender = "Male";
        }
        if (rdbFemale.isSelected()) {
            gender = "Female";
        }
        int age = Integer.parseInt(txtPatientAge.getText());

        PatientDTO patientDTO = new PatientDTO(patNic, patName, patAddress, patTele, gender, age);
        try {
            boolean add = patientController.add(patientDTO);
            if (add) {
                JOptionPane.showMessageDialog(this, "SUCCESS");
            } else {
                JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
            }
        } catch (Exception e) {

        }
    }

    private void updatePatient() {
        String patNic = txtPatientNic.getText();
        String patName = txtPatientName.getText();
        String patAddress = txtPatientAddress.getText();
        int patTele = Integer.parseInt(txtPatientTele.getText());

        String gender = "";
        if (rdbMale.isSelected()) {
            gender = "Male";
        }
        if (rdbFemale.isSelected()) {
            gender = "Female";
        }
        int age = Integer.parseInt(txtPatientAge.getText());

        PatientDTO patientDTO = new PatientDTO(patNic, patName, patAddress, patTele, gender, age);
        try {
            boolean update = patientController.update(patientDTO);
            if (update) {
                JOptionPane.showMessageDialog(this, "SUCCESS");
            } else {
                JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removePatient() {

        String patId = txtPatientNic.getText();
        try {
            boolean delete = patientController.delete(patId);

            if (delete) {
                JOptionPane.showMessageDialog(this, "SUCCESS");

            } else {
                JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchPatient() {

        String id = txtPatientNic.getText();
        try {
            PatientDTO search = patientController.search(id);

            if (search != null) {
                txtPatientName.setText(search.getPatName());
                txtPatientAddress.setText(search.getPatAddress());
                txtPatientTele.setText(Integer.toString(search.getPatTele()));
                if (search.getGender().equalsIgnoreCase("male")) {
                    rdbMale.setSelected(true);
                } else {
                    rdbFemale.setSelected(true);
                }
                txtPatientAge.setText(Integer.toString(search.getAge()));
            } else {
                JOptionPane.showMessageDialog(this, "Patient Not Found..");
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addToTimeTable() {
        String docId = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 1);
        DefaultTableModel dtm = (DefaultTableModel) tblTime.getModel();
        String dayId = "";
        String day = "";
        dtm.setRowCount(0);
        try {

            ArrayList<SheduleDTO> allShedules = sheduleController.getAll();
            for (SheduleDTO all1 : allShedules) {
                if (all1.getDocid().equalsIgnoreCase(docId)) {
                    dayId = all1.getDayid();

                }
            }

            ArrayList<DayDTO> allDays = dayController.getAll();
//           
            for (SheduleDTO all1 : allShedules) {
                if (all1.getDocid().equalsIgnoreCase(docId)) {
                    dayId = all1.getDayid();
                    for (DayDTO allDay : allDays) {
                        if (allDay.getDayid().equalsIgnoreCase(dayId)) {
                            day = allDay.getDayname();
                        }
                    }
                    Object[] rowData = {day, all1.getTime()};
                    dtm.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateAppointment() {

        String patId = txtPatientNic.getText();
        String appId = txtAppId.getText();
        int appNo = Integer.parseInt(txtAppNo.getText());
        String appDate = lblAppDate.getText();
        String appTime = lblAppTime.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date = pickerAppDate.getDate();
        String bookDate = sdf.format(date);
        String bookTime = cmbTime.getSelectedItem().toString();
        String docId = jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString();

        AppointmentDTO appointmentDTO = new AppointmentDTO(appId, appNo, appDate, appTime, bookDate, bookTime, docId, patId);
        try {
            boolean update = appointmentController.update(appointmentDTO);
            if (update) {
                JOptionPane.showMessageDialog(this, "SUCCESS");
            } else {
                JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void autoGenId() {
        try {
            String newID = AutoGenId.getNewID("appointment", "appId", "APP");
            txtAppId.setText(newID);
        } catch (SQLException ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void setPatientCount() {
        String docId = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 1);
        try {
            DoctorDTO search = doctorController.search(docId);
            int patientLimit = search.getPatientLimit();
            patientLimit--;
            boolean updatePatientCount = doctorController.updatePatientCount(docId, patientLimit);
            if (updatePatientCount) {
                JOptionPane.showMessageDialog(this, "SUCCESS");
            } else {
                JOptionPane.showMessageDialog(this, "SOMETHING WENT WRONG");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void autoGenPatientId() {
        try {
            String newID = AutoGenId.getNewID("patient", "patId", "PAT");
            txtPatientNic.setText(newID);
        } catch (SQLException ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void setAppointmentNo() {
        String docId = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 1);
        try {
            int lastAppointmentNo = appointmentController.getLastAppointmentNo(docId);
            lastAppointmentNo++;
            txtAppNo.setText(Integer.toString(lastAppointmentNo));
        } catch (Exception ex) {
            Logger.getLogger(AddAppointment1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
